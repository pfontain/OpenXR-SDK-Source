// Copyright (c) 2020-2023, The Khronos Group Inc.
//
// SPDX-License-Identifier: Apache-2.0

// Open this directory in Android Studio, or build with Gradle,
// to build the "hello_xr" sample application
buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.4.2'
    }
}

repositories {
    google()
    mavenCentral()
}

apply plugin: 'com.android.application'

// These next few lines are just to make the version match the OpenXR release.
project.ext.repoRoot = file('../../../')
apply from: file('../../version.gradle')

android {
    compileSdk 29
    ndkVersion "21.4.7075529"
    buildToolsVersion = "30.0.3"

    defaultConfig {
        applicationId "org.khronos.openxr.hello_xr"
        // for Vulkan, need at least 24
        minSdkVersion 24

        versionName = project.versionOpenXR.toString() + project.versionQualifier
        versionCode = project.versionOpenXR.getVersionCode()

        externalNativeBuild {
            ndk {
                abiFilters 'arm64-v8a'
            }
            cmake {
                arguments "-DOCULUS_OPENXR_MOBILE_SDK=" + getOculusOpenXRMobileSDKPath()
                cppFlags ''
            }
        }
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            res.srcDir 'android_resources'
        }
        Vulkan {
            res.srcDir 'android_resources/vulkan'
        }
        OpenGLES {
            res.srcDir 'android_resources/opengles'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }

    externalNativeBuild {
        cmake {
            path "${project.repoRoot}/CMakeLists.txt"
        }
    }

    flavorDimensions 'api'

    productFlavors {
        OpenGLES {
            dimension 'api'
            applicationIdSuffix '.opengles'
            externalNativeBuild.cmake.cppFlags '-DDEFAULT_GRAPHICS_PLUGIN_OPENGLES'

            resValue "string", "app_name", "Hello XR (OpenGL ES)"
        }
        Vulkan {
            dimension 'api'
            applicationIdSuffix '.vulkan'
            externalNativeBuild.cmake.cppFlags '-DDEFAULT_GRAPHICS_PLUGIN_VULKAN'

            resValue "string", "app_name", "Hello XR (Vulkan)"
        }
    }
}

def getOculusOpenXRMobileSDKPath() {
    // oculus.openxr.mobile.sdk.path property must be set to the path of the
    // Oculus OpenXR Mobile SDK in the local.properties file before building.

    Properties properties = new Properties()
    def localPropertiesFile = project.rootProject.file('local.properties')
    assert localPropertiesFile.exists()
    properties.load(localPropertiesFile.newDataInputStream())

    String sdkPathPropertyName = "oculus.openxr.mobile.sdk.path"
    def sdkPath = properties.getProperty(sdkPathPropertyName)
    project.logger.debug("Oculus OpenXR Mobile SDK Path: " + sdkPath)
    assert file(sdkPath).exists()
    return sdkPath
}
